\input texinfo
@setfilename readargs.info
@settitle readargs library

@include macros.txi

@c @dircategory and @direntry signal how to incorporate
@c this content into the larger info environment.
@c Consult the root `info` for direction, but in general
@c try to add to an existing category and make the entry
@c conform to existing entries.
@dircategory Libraries
@direntry
* readargs: (readargs).       Documentation for readargs command line processing library
@end direntry

@c copyright notice.  to be included in @titlepage with @insertcopying
@copying
Offline Manual for readargs

Copyright @copyright{} 2020 Charles P Jungmann
@end copying

@titlepage
@title Using readargs
@author Charles P. Jungmann
@page
@insertcopying
@end titlepage

@paragraphindent none

@ifnottex
@node Top
@top Using readargs

This manual is a reference for using the @emph{readargs} library.

@emph{readargs} interprets command line arguments, identifying
options and values according to the GNU extensions to the Posix
standard.
@end ifnottex

@contents
@menu
* Introduction::
* Getting Started::         Learn how to use the library
* Data Types::              Data types that support argument processing
* Library Functions::       

* Preparing Actions::
* Builtin Action Agents::   
* Custom Action Agents::    Extend the library with 
* Actions Interpretation::  Explains how the library reads arguments

* Quick Start::             Enough to get you started

* Index::
@end menu

@node Introduction
@chapter Introduction

Coding to process command line arguments for C programs can be
a tedious task.  It is difficult to parse arguments according
to platform standards, it is time consuming to prepare help and
usage displays, and the code needed for implementation is often
long and hard to scan.

The @code{readargs} C library addresses these issues with a new
pattern for handling arguments.

The developer prepares an array of @code{raAction} instances called
a @dfn{action map}.  Each @code{raAction} points to an @code{raAgent}
object that handles the action's mission.

The library matches the @code{raAction} from its letter or name
according to the GNU extensions to the Posix standard

@include starting.txi
@include types.txi
@include functions.txi
@include actions.txi
@include builtin_agents.txi
@include custom_agents.txi
@include interpretation.txi
@include quickstart.txi

@node Index
@chapter Index

@printindex fn

@bye
