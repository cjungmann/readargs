@node Display Functions
@section Display Functions

By convention, libraries usually do not create screen output.
However, in the interest of simplifying the developer's burden,
this library provides several functions that produce parts of
or complete help screens.  These functions can be used according
to the developer's needs.

@menu
* ra_describe_arguments::           display non-options
* ra_describe_options::             display list of options with comments
* ra_describe_usage::               display usage template
* ra_scene_options_count::          returns number of options
* ra_scene_arguments_count::        returns number of argument (non-options)
* ra_show_help::                    builds full help screen with @code{ra_display_usage},
                                    @code{ra_display_options}, and @code{ra_display_arguments}
* ra_show_no_args_message::         boilerplate message for no arguments

* ra_show_scene_values::            debugging display that shows current state values

* ra_write_warning::                displays a message for unsuccessful option calls
@end menu

@node ra_describe_arguments
@subsection ra_describe_arguments

@deftypefun void ra_describe_arguments (@*@
            FILE* @var{f},@*@
            int @var{indent})

Print the names, types, and descriptions for each @code{raAction} that
is a non option action.

This function is called by @code{ra_show_help}, but may be used in a
custom help display.

@xref{ra_show_help}
@end deftypefun

@node ra_describe_options
@subsection ra_describe_options

@deftypefun void ra_describe_options (@*@
            FILE* @var{f},@*@
            int @var{indent})

Print names types, and descriptions for each @code{raAction} that
can be invoked on the command line with a short or long option.

This function is called by @code{ra_show_help}, but may be used in a
custom help display.

@xref{ra_show_help}

@end deftypefun

@node ra_describe_usage
@subsection ra_describe_usage

@deftypefun void ra_describe_usage (@*@
            FILE* @var{f}, @*@
            int @var{indent}, @*@
            raUsage @var{usage})

Print a single line usage message to @var{f} that consists of
the command name followed by a representation of the options
and non options.

This function is called by @code{ra_show_help}, but may be used in a
custom help display.

There is a threshhold options count below which the option letters
will all be printed, and above which they will be implied.

This function is mostly a placeholder function to use during
development.  A finished project should probably include a custom
usage message.

@xref{ra_show_help}

@end deftypefun

@node ra_scene_options_count
@subsection ra_scene_options_count

@deftypefun int ra_scene_options_count (void)

Returns the number of @code{raAction} instances that are invoked
with an option letter or name.

Call this function before calling @code{ra_describe_options} so
@code{ra_describe_options} can be skipped if there are no options.

@xref{Option Action}

@end deftypefun

@node ra_scene_arguments_count
@subsection ra_scene_arguments_count

@deftypefun int ra_scene_arguments_count (void)

Returns the number of @code{raAction} instances that are applied
to non-option arguments.  In other words, this returns the count
of @code{raAction} instances not included in @code{ra_scene_options_count}.

Call this function before calling @code{ra_describe_arguments} so
@code{ra_describe_arguments} can be skipped if there are no arguments.

@xref{Non option Action}

@end deftypefun

@node ra_show_help
@subsection ra_show_help

@deftypefun void ra_show_help (@*@
            FILE* @var{f}, @*@
            int @var{indent}, @*@
            raUsage @var{usage})

This function displays a full help display, including a usage
line, a list of options (if any), and a list of arguments (if any).

This function is called by the builtin @code{ra_show_help_agent}
@code{raAgent}.

@xref{ra_show_help_agent}
@end deftypefun

@node ra_show_no_args_message
@subsection ra_show_no_args_message

@deftypefun void ra_show_no_args_message (void)

Show the usage line along with advice to try the @option{-h} option
for help.

This is a convenience function that can be called after an obvious
error in calling the program, like calling it without any arguments.

@end deftypefun


@node ra_show_scene_values
@subsection ra_show_scene_values

@deftypefun void ra_show_scene_values (FILE * @var{f})

Prints values of @code{raAction} instances that include
a @code{target} pointer and an @code{raAgent} with a
@code{raWriter}.

This function is meant for debugging purposes and may be
useful for both the developer and end user to confirm that
certain options have been set appropriately.

This function is used by the builtin @code{raAgent}
@code{ra_show_values_agent}.

@xref{ra_show_values_agent}

@end deftypefun


@node ra_write_warning
@subsection ra_write_warning

@deftypefun void ra_write_warning (@*@
            FILE *@var{f}, @*@
            raStatus @var{status}, @*@
            const raTour *@var{tour}, @*@
            const raAction *@var{action}, @*@
            const char *@var{value});

Displays a user-readable message to help understand unexpected
results.

@table @code
@item FILE *f
File stream to which the warning will be written

@item raStatus status
Status value for which the warning is needed

@item const raTour *tour
Tour status to consider the context of the error being reported

@item const raAction *action
Specific @code{raAction} that was being processed when the error occurred.
The short or long option from the @code{raAction} is included in the
warning.

@item const char *value
Value being applied when the error occurred.  If not NULL, this
value is included in the warning.

@end table


@end deftypefun
