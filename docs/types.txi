@node Data Types
@chapter Data Types

@menu
Function pointer types
* raReader::      executes the actions mission
* raWriter::      displays an action's value

struct types
* raAgent::       contains resources needed to process an action
* raAction::      holds details of an defined action
* raScene::       preserves static values from @code{main} for navigating tours
* raTour::        tracks progress through command line arguments

enumeration types
* raStatus::      return value from many library functions
@end menu

@c raReader function pointer type
@node raReader
@section raReader
Function pointer called by the library to execute an action's mission.
This is a @strong{mandatory} member of the @ref{raAgent} struct.

@c Function pointer type definition modeled after
@c tss_dtor_t in libc library (threads.texi).
@deftp {Function Pointer Type} raReader

The @code{raReader} is a function pointer of type @*
@code{raStatus (*)(const raAction *act, const char *str, raTour *tour)}.

You can find a simple @code{raReader} implementation in section
@xref{Floating Agent}, which is also found in @file{samples/customs.c}.

@table @code
@item const raAction *act
This is the @code{raAction} instance that provided the @code{raReader}
pointer.  The reader function can refer to the @code{raAction}
for details about the action, especially the @code{target} pointer
if the mission is to set the @code{target} value.

@item const char *str
The command line argument string that is to be used for setting
the @code{target}.  This is not always a separate command line
argument because in some cases the @code{*str} value is the set
of characters that remain after the letter of a value-action
invocation.

@item raTour *tour
The @code{raTour} object that is tracking the progress through
the command line arguments.  This argument is rarely accessed,
but is useful when it's necessary to return the @code{*str} to
the argument tour for an optional-value option,  or if the action
needs to consume more than one argument.@*@
@xref{Optional-value Agent}  @*@
@xref{Multi-value Agent}

@end table

@end deftp

@c raWriter function pointer type
@node raWriter
@section raWriter
If not @code{NULL}, the library calls this function pointer
to print out the action's value.  This is an @emph{optional}
member of the @ref{raAgent} struct because some actions are
not associated with any value, like showing the help or usage
display.

You can find a simple @code{raWriter} implementation in section
@xref{Floating Agent}, which is also found in @file{samples/customs.c}.

@deftp {Function Pointer Type} raWriter

The @code{raWriter} is a function pointer of type@*
@code{void (*)(FILE *f, const raAction *act)}.

@table @code
@item FILE *f
Stream pointer to which the value is to be written.

@item const raAction *act
The current @code{raAction} action, through which the @code{target}
can be accessed for writing out the value.

@end table
@end deftp

@c raAgent
@node raAgent
@section raAgent
An @code{raAgent} instance represents the @code{raAction}
to the library, providing a standard interface through
which the library can execute the action's mission.  Each
instance of @code{raAction} needs an @code{raAgent} for
this purpose.

You can find a simple @code{raAgent} implementation in section
@xref{Floating Agent}, which is also found in @file{samples/customs.c}.

Minimally, it contains three members, but customized
versions can longer according to the action's needs.

@deftp {Data Type} raAgent

@declRAAGENT

@table @code
@item int @var{args_needed}
Minimally, this can be @code{0} or not @code{0}, with @code{0}
indicating a @emph{flag} action that takes no arguments.
Some customized @code{raAgent} definitions may differentiate
between @code{1} and something else.

@item raReader @var{reader}
This is a pointer to a function that processes the command
line argument according to the matched action.

@item raWriter @var{writer}
If not @code{NULL}, the library will call this function
pointer when displaying value the associated action.

@end table
@end deftp

Learn about the members of an @code{raAgent} instance (@pxref{raAgent})

There are several builtin agents, @xref{Builtin Action Agents}.

Developers can also make custom agents @xref{Advanced Topics, for several custom agent examples}.


@c raAction 
@node raAction
@section raAction
This data type associates an agent, a target, and a comment
with an option letter or long-option label.  An array of @code{raAction}
instances defines the command line processing map which is used
by the library to determine how to handle command line arguments.

@deftp {Data Type} raAction

@declRAACTION

We have had an earlier discussion about how the members affect
the user experience (@pxref{raAction Intro}).

@table @code
@item int @var{letter}
The letter that invokes the action.  If this value is @code{0}, there
is no letter invocation.  If this value is @code{-1} and @var{label} is
@code{NULL}, the action is a position action.

@item const char *@var{label}
This is the long-option invocation, matched when this string
is preceded by a double-dash.  If this value if @code{NULL}, there will
be no long-option access to this action.

@item const char *@var{comment}
Used for the description of the action when showing the
help display.

@item const raAgent *@var{agent}
A pointer to an @code{raAgent}, which coordinates the interaction
of the command line settings and the application.

@item void *@var{target}
A pointer that is cast to the appropriate data type by the reader
to change a value or the write to display a value.  This member is
not necessary for some actions like displaying help.

@item const char *@var{type}
A string to use in help displays to show the data type expected by
a given action.  The string @code{VALUE} will be used if this value
is @code{NULL}.

@end table
@end deftp

@c raScene
@node raScene
@section raScene
This data type describes a static singleton global
variable that preserves the sets of command line arguments
and action definitions.  This member is typically initialized
in function @code{main}.@*@
@xref{ra_set_scene}@*@
@xref{Hello Library}

@deftp {Data Type} raScene

@declRASCENE

@table @code
@item const char **@var{args}
Points to the first of the list of command line arguments

@item const char **@var{args_end}
Points to memory just past the last of the command line arguments.
It is used to test if a given argument is within bounds.

@item const raAction *@var{actions}
Points to the first of the list of action definitions

@item const raAction *@var{actions_end}
Like @code{args_end}, this member is used to test if a given
action is within bounds.

@end table
@end deftp

@c raTour
@node raTour
@section raTour

This data type tracks progress through a given @emph{tour} of
command line arguments.  An @code{raTour} instance is usually
initialized just before processing the command line arguments,
but a generated @code{raTour} may also be created for collecting
argument values interactively.@*@
@xref{ra_start_tour} @*@
@xref{Interactive Action Use}

initialized

@deftp {Data Type} raTour

@declRATOUR

@table @code
@item const char **@var{current_arg}
A pointer to one of the arguments found in the @code{raScene}.

@item const char *@var{sub_arg_ptr}
For arguments that are a list of single-letter options, this
member tracks the progress through the set for each iteration
of the actions parsing loop.

@item const raAction *@var{current_action}
Pointer to @code{raAction} on which the current processing is
working.

@item const raAction *@var{last_position_action}
This keeps track of already processed position actions
to know which is next and to ensure each position action
is used only once.
@end table
@end deftp

@include rastatus.txi


