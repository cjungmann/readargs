@node Data Types
@chapter Data Types

@menu
Function pointer types
* raReader::      saves changes to an option's value
* raWriter::      displays an option's value

struct types
* raAgent::       contains elements needed to process an option
* raOpt::         holds details of an defined option
* raScene::       preserves static values from @code{main} for navigating tours
* raTour::        tracks progress through command line arguments
@end menu

@c raReader function pointer type
@node raReader
@section raReader
Function pointer called by the library to save an option's value,
this is a @strong{mandatory} member of the @ref{raAgent} struct.

@deftp {Function Pointer Type} raStatus (*raReadeer)(const raOpt *opt, const char *str, raTour *tour)

@table @code
@item const raOpt *opt
This is the currently-matched option, which give access
to the @code{target} void pointer element.  In most cases,
the @code{reader} function casts and sets the @code{target}
according to the value in @code{str}

@item const char *str
The command line argument string that is to be used for setting
the @code{target}.  This is not always a separate command line
argument because in some cases the option value is the remainder
of the characters in a grouped short option invocation.

@item raTour *tour
The @code{raTour} object that is tracking the current pass
through the command line arguments.  This can be used to consume
or restore argument acccording to the needs of the particular
item type.
@end table

@end deftp

@c raWriter function pointer type
@node raWriter
@section raWriter
Function pointer called by the library to write an option's value,
this is an @emph{optional} member of the @ref{raAgent} struct.

@deftp {Function Pointer Type} void (*raWriter)(FILE *f, const raOpt *opt)

@table @code
@item FILE *f
Stream pointer to which the value is to be written.

@item const raOpt *opt
The current @code{raOpt} option, through which the @code{target}
can be accessed for writing out the value.

@end table
@end deftp

@c raAgent
@node raAgent
@section raAgent
struct containing elements needed for the library to
interact with the command line arguments.  A pointer to
an instance of @code{raAgent} is one element of the
@code{raOpt} struct (@pxref{raOpt}).

Minimally, it contains three members, but customized
versions can longer according to the option's needs.

@deftp {Data Type} raAgent

@table @code
@item int args_needed
Minimally, this can be @code{0} or not @code{0}, with @code{0}
indicating a @emph{flag} option that takes no arguments.
Some customized versions may differentiate between @code{1}
and something else.

@item raReader reader
This is a pointer to a function that processes the command
line argument according to the matched option.

@item raWriter writer
This is a pointer to a function that writes the option
value of the matched option.

@end table
@end deftp

There are several builtin agents, @xref{Builtin Option Agents}.

Developers can also make custom agents.  @xref{raAgent Detail}.

@c raOpt 
@node raOpt
@section raOpt
This data type associates an agent, a target, and a comment
with an option letter or long-option label.  A set of @code{raOpt}
objects defines the command line processing of a command.

@deftp {Data Type} raOpt

@table @code
@item int letter
The letter that invokes the option.  If this value is @code{0}, there
is no letter invocation.  If this value is @code{-1} and @var{label} is
@code{NULL}, the option is a position option.

@item const char *label
This is the long-option invocation, matched when this string
is preceded by a double-dash.  If this value if @code{NULL}, there will
be no long-option access to this option.

@item const char *comment
Used for the description of the option when showing the
help display.

@item const raAgent *agent
A pointer to an @code{raAgent}, which coordinates the interaction
of the command line settings and the application.

@end table
@end deftp

@c raScene
@node raScene
@section raScene
This data type describes a static singleton global
variable that preserves the sets of command line arguments
and option definitions.

@deftp {Data Type} raScene

@table @code
@item const char **args
Points to the first of the list of command line arguments

@item const char **args_end
Points to memory just past the last of the command line arguments.
It is used to test if a given argument is within bounds.

@item const raOpt *options
Points to the first of the list of option definitions

@item const raOpt *options_end
Like @code{args_end}, this member is used to test if a given
option is within bounds.

@end table
@end deftp

@c raTour
@node raTour
@section raTour

This data type tracks progress through a given @emph{tour} of
command line arguments.

@deftp {Data Type} raTour

@table @code
@item const char **current_arg
A pointer to one of the arguments found in the @code{raScene}.

@item const cahr *sub_arg_ptr
For arguments that are a list of single-letter options, this
member tracks the progress through the set for each iteration
of the options parsing loop.

@item const raOpt *current_option
Pointer to @code{raOpt} on which the current processing is
working.

@item const raOpt *last_position_option
This keeps track of already processed position options
to know which is next and to ensure each position option
is used only once.
@end table
@end deftp

