@node Arguments Functions
@section Arguments Functions

The functions are called by @code{ra_process_arguments} can be
used to customize a program's response to command line arguments.
The source code for @code{ra_process_arguments} can serve as a
model.

@menu
* ra_start_tour::                   prepare raTour for pass through command line (CL) arguments
* ra_advance_arg::                  move to next CL argument
* ra_retreat_arg::                  move CL argument pointer back one position
* ra_advance_action::               move to next action
* ra_current_arg::                  current CL argument
* ra_current_action::               current action
* ra_seek_raAction_by_letter::      find matching @code{raAction} instance with a letter.
* ra_seek_raAction_by_label::       find matching @code{raAction} instance with a string.
@end menu

@node ra_start_tour
@subsection ra_start_tour

@deftypefun {raTour *} ra_start_tour (raTour *@var{tour})

Initialize @var{tour} with starting positions of the global
@var{g_scene} variable.

@end deftypefun



@node ra_advance_arg
@subsection ra_advance_arg

@deftypefun {const char *} ra_advance_arg (raTour *@var{tour})

Moves the argument pointer ahead one position.  Note that the argument
is an uninterpreted command line argument, which may or may not be an
option.

@end deftypefun

@node ra_retreat_arg
@subsection ra_retreat_arg

@deftypefun raStatus ra_retreat_arg (raTour *@var{tour})

Moves the argument pointer back one position.  This is mainly used
for optional value actions when the value is determined to be unneeded.
Returning the argument puts it in the queue to be considered for the
next option.

@end deftypefun

@node ra_advance_action
@subsection ra_advance_action

@deftypefun raStatus ra_advance_action (@*@
            raTour *@var{tour},@*@
            const raAction **@var{action},@*@
            const char **@var{value})

@table @code
@item raTour *@var{tour}
The function consumes arguments from the @code{raTour} instance,
updating the pointers therein to be prepared for the next
call of @code{ra_advance_action}.

@item const raAction **@var{action}
The matched @code{raAction} is returned through this pointer-to-pointer
parameter.

@item const char **@var{value}
If the @code{raAction} is a value action, the value to be applied to
the action is returned in this pointer-to-pointer parameter.

Custom optional-value actions may decide that the value does not
apply to the current action, in which case this value should be
declined by calling @code{ra_retreat_arg}.

@end table
@end deftypefun

@node ra_current_arg
@subsection ra_current_arg

@deftypefun {const char *} ra_current_arg (const raTour *@var{tour})

Points to the @code{argv} element currently being considered.

@end deftypefun

@node ra_current_action
@subsection ra_current_action

@deftypefun {const raAction *} ra_current_action (const raTour *@var{tour})

Returns the latest @code{raAction} element that matched a user argument.

@end deftypefun

@node ra_seek_raAction_by_letter
@subsection ra_seek_raAction_by_letter

@deftypefun {const raAction *} ra_seek_raAction_by_letter (const char @var{letter})

Returns the @code{raAction} instance whose @var{letter} member matches the
@var{letter} argument, or NULL if there is no matching @var{letter}.

@end deftypefun


@node ra_seek_raAction_by_label
@subsection ra_seek_raAction_by_label

@deftypefun {const raAction *} ra_seek_raAction_by_label (const char *@var{str})

Returns the @code{raAction} instance whose @var{label} member matches the
@var{str} parameter, or NULL if there is no matching @var{label}.

@end deftypefun
