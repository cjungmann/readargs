@node Interactive Action Use
@chapter Interactive Action Use


@example
int        resp_len, args_count;
char       *response = NULL;
const char **args = NULL;
raAction   *action = ra_seek_raAction_by_letter('b');

// Use builtin function to generate prompt (or write your own prompt).
ra_print_interactive_prompt(action);

// Three-step process to get user response into an
// appropriately-scoped memory location.
resp_len = ra_collect_user_response();     // @xref{ra_collect_user_response}
response = (char*)alloca(resp_len);
ra_copy_user_response(response, resp_len); // @xref{ra_copy_user_response}

// Either call @code{ra_process_action_with_response}, or
// run the following six lines (not counting comments) of code:
// @xref{ra_process_action_with_response}

// Create the arguments array
args_count = ra_count_str2args(response);  // @xref{ra_count_str2args}
args = (const char**)alloca(args_count * sizeof(char*));
ra_str2args(response, args, arg_count);    // @xref{ra_str2args}

// Make temporary raTour for dispensing arguments
raTour tour @{ args, *args + count_args, action, action+1 @};
const char *value = ra_current_arg(&tour);    // arg execution order uncertain
ra_execute_action_read(action, value, &tour); // @xref{ra_execute_action_read}
@end example
