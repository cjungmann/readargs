@node ra_set_scene
@section ra_set_scene

@deftypefun void ra_set_scene({const char **} start_arg, @
                              int arg_count, @
                              {const raAction *} start_opt, @
                              int opt_count)

This function saves the command line arguments and the
array of @code{raAction} struct to global variable @code{g_scene}
(@pxref{raAction}).

It should be called in function @code{main}, when the
@code{argc} and @code{argv} arguments are available.

If you use a local array of @code{raAction}, pay attention
to the scope of the array.  The array must remain in memory
until @code{g_scene} is no longer necessary.

@table @code

@item const char **start_arg
This is the @code{argv} argument of the function @code{main}.

@item int arg_count
This is the @code{argc} argument of the function @code{main}.

@item const raAction* start_opt
This is a pointer to an array of @code{raAction} structs that
describe the available options.

@item int opt_count
This is the number of @code{raAction} elements in the array.
There is a helper macro for calculating this value,
@code{OPTS_COUNT}.
@end table

@end deftypefun

@node ra_process_arguments
@section ra_process_arguments

This function lets the library do everything for you.  It takes
no arguments since it's using the global @code{g_scene} variable
to begin processing.

@deftypefun int ra_process_arguments (void)
This function is where everything happens.  It matches command
line arguments with registered options and passes control to
@emph{agent}s that respond to the matched options.
@end deftypefun

@deftypefun void ra_set_scene @
            ({const char**} start_arg, @
            int arg_count, @
            {const raAction *} start_opt, @
            int opt_count)
This function should be called in @
@end deftypefun
            

