@node Basic Functions
@section Basic Functions

The functions in this section, especially @code{ra_process_arguments},
are all the minimum requirements for creating an application
that processes the users' command line arguments.

There is a code listing that restricts itself to these
functions.  (@pxref{Simple and Complete})

@menu
* ra_set_scene::                    register global variable with command line arguments
                                    list of option instructions
* ra_process_arguments::            processes command line arguments
* ACTS_COUNT::                      macro that counts actions in action map
@end menu

@node ra_set_scene
@subsection ra_set_scene
@cindex functions @subentry basic

@deftypefn void ra_set_scene (@*@
           const char ** @var{start_arg}, @*@
           int @var{arg_count}, @*@
           const raAction * @var{start_action}, @*@
           int @var{action_count})

This function saves the command line arguments and the
array of @code{raAction} struct to global variable @code{g_scene}
(@pxref{raAction}).

It should be called in function @code{main}, when the
@code{argc} and @code{argv} arguments are available.

If you use a local array of @code{raAction}, pay attention
to the scope of the array.  The array must remain in memory
until @code{g_scene} is no longer necessary.

@table @code

@item const char **start_arg
This is the @code{argv} argument of the function @code{main}.

@item int arg_count
This is the @code{argc} argument of the function @code{main}.

@item const raAction* start_action
This is a pointer to an array of @code{raAction} structs that
describe the available options.

@item int action_count
This is the number of @code{raAction} elements in the array.
There is a helper macro for calculating this value,
@code{ACTS_COUNT}.
@end table

@xref{def step 3,,,Use in code}
@end deftypefn


@node ra_process_arguments
@subsection ra_process_arguments
@cindex functions @subentry basic

@deftypefn int ra_process_arguments (void)

This function lets the library do everything for you.  It takes
no arguments since it's using the global @code{g_scene} variable
to begin processing.

The function returns 1 if the program should continue.  It will
return 0 if the program should be terminated, which happens when
a display option returns a @code{raStatus} value of @var{RA_CANCEL}.
For example, a @emph{help} action using @code{ra_show_help_agent}
will return @var{RA_CANCEL} after displaying help text to prevent
the program from running afterwards.

This function writes warning and error messages to @var{stdout}.
This is not typical library behavior, but it fulfills its mission
to be a plug-in solution for someone making an application.

If this behavior is not appropriate for your application, look at
the @xref{Argument Processing} for a break-down of this function to
see where @code{ra_write_warnings} is called and decide how you might
otherwise handle user-entry errors.

@xref{def step 4}@*
@xref{Argument Processing}
@end deftypefn


@node ACTS_COUNT
@subsection ACTS_COUNT

@defmac {Setup Macro} ACTS_COUNT (@var{actions_array})

This macro calculates the number of actions in an array by dividing
the @code{sizeof} the array by the @code{sizeof} an @code{raAction}.

@xref{raAction} @*
@xref{def step 2}

@end defmac
