@node Non-options Example
@section Non-options Example

The following source listing illustrates how to prepare several
different action types.

@example
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <readargs.h>

// Prepare action targets and the actions array (@pxref{raAction})
const char *input = NULL;
const char *output = NULL;
const char *blame = NULL;

raAction actions[] = @{
  @{'h', "help",  "This help output", &ra_show_help_agent,    NULL,   NULL    @},
  @{'s', "show",  "Show settings",    &ra_show_values_agent,  NULL,   NULL    @},

  // Non-option, positional actions
  @{-1, "*input",  "File to process",  &ra_string_agent, &input, "STRING" @},
  @{-1, "*blame",  "Person to blame",  &ra_string_agent, &blame, "STRING" @},   

  @{'o',
    "output",
    "Where to send output, if not to stdout",
    &ra_string_agent,
    &output,
    "STRING" @}
@};

int main(int argc, const char **argv)
@{
   FILE *infile = NULL;
   FILE *outfile = NULL;
   char buffer[1024];
   int bytes_read;

   if (argc < 2)
   @{
      // If some arguments are necessary, a usage message may be helpful.
      // Create your own message, or use the builtin message display (@pxref{ra_show_no_args_message}).
      ra_show_no_args_message();
      return 1;
   @}
   else
   @{
      // Register the arguments and option instructions to
      // the global raScene variable @xref{ra_set_scene}, @xref{raScene}
      ra_set_scene(argv, argc, actions, ACTS_COUNT(actions));

      // Call the function that starts everything @xref{ra_process_arguments}
      if (ra_process_arguments())
      @{
         if (!blame)
         @{        
            printf("Missing required responsible person.\n");
            return 1;
         @};

         if (!input)
         @{        
            printf("Missing required input file.\n");
            return 1;
         @}
         else
         @{
            if (output)
               outfile = fopen(outfile, "w");
            else
               outfile = stdout;

            infile = fopen(input, "r");
            if (infile)
            @{
               while ((bytes_read=fread(buffer, sizeof(buffer), 1, infile))>0)
               @{
                  fwrite(buffer, bytes_read, 1, outfile);
               @}

               if (output && outfile)
                  fclose(outfile);

               fclose(infile);
            @}
            else
            @{
               printf("Failed to open %s: %s.\n", input, strerror(errno));
            @}
         @}
      @}
   @}

   return 0;
@}


@end example

