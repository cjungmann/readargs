@node An Array of Actions
@section An Array of Actions

An @code{raAction} is a struct that associates the information
needed to
@enumerate
@item
invoke the option with the @var{letter} and @var{label}
@item
execute the option using @var{agent} and @var{target}.
@item
explain the action using @var{comment} and @var{type}
@end enumerate

The library works with an array of @code{raAction} instances,
called the @dfn{action map}, to process command line arguments.

@xref{raAction}

@example
typedef struct @{
  int           @var{letter};
  const char    *@var{label};
  const char    *@var{comment};
  const raAgent *@var{agent};
  void          *@var{target};
  const char    *@var{type};
@} raAction;
@end example

Here is a sample @code{raAction} array:

@example
raAction actions[] = @{
   @{ 'o', "output",  "Output file",    &ra_string_agent, &output_file, "FILENAME" @},
   @{ 'p', "port",    "Email port",     &ra_int_agent,    &port_number, "PORT NUMBER" @},

   // @code{raAction} structs with omitted initial values
   @{ 'v', "verbose", "Verbose output", &ra_flag_agent,   &show_verbose @},
   @{ 'h', "help",    "Show this help", &ra_show_help_agent @},

   // Long option but no short option
   @{ 0  , "debug",   "Debug mode",     &rs_flag_agent,   &debug_mode @},
   // Short option but no long option
   @{ 'u', NULL,      "Undo mode",      &rs_flag_agent,   &undo_flag @},
   // Non-option, positional action
   @{ -1,  "*input"   "Input file",     &ra_string_agent, &input_file, "FILENAME" @}

@};

@end example

@table @code
@item Memory Scope
In these examples, both the state variables and the action map are global
variables.  This is convenient, but not necessary.  Global variables are
used because they are accessible and persistent, but local variables in
@code{main} also live long enough to be useful.

@item Omitted initializers
Notice that lines three and four (the verbose and help actions) initialize
fewer than the full set of data members.  This is a convenience made
possible by the C language, which sets uninitialized data members to 0.

Flag actions, in particular, have no need for the @var{type} member
because the option does not take a flag.  Display actions like @code{help}
may not need either the @var{agent} or @var{type} members, in which case
they are both optional.

@item Singular invocations (letter or label only)
An action may be called by either or both the short or long
option methods.  Initialize the unneeded @var{letter} or @var{label}
option with a 0 or NULL to not recognize that invocation.  Lines
five and six demonstrate singular invocations.

@item Non-option or positional action
When a value will be collected without an preceding option
invocation is a non-option or positional argument.  Line seven
is an example of this sort.  There are two distictions of this
type:

@enumerate
@item
The @var{letter} member is set to @code{-1}
@item
The @var{label} member includes a non-display prefix, @code{*}.
@end enumerate

@end table




