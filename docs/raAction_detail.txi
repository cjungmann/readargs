@node raAction Detail
@section raAction Detail

An instance of this struct defines the methods of
invoking the option (letter and/or long option), a comment
string used for @option{--help} output, and an agent for
recording the user's command.

An array of these objects is called a command line parsing map,
which is used by the library to identify actions according to
the command line arguments submitted by the user.
(@pxref{Basic Example})

@example
typedef struct _readargs_action
@{
   int           letter;   /* letter that invokes the action */
   const char    *label;   /* long-option name invoking action */
   const char    *comment; /* documents option for help output */
   const raAgent *agent;   /* object that manages value */
   void          *target;  /* optional data pointer */
   const char    *type;    /* optional string to describe the value */
@} raAction;
@end example

@menu
* raAction letter::
* raAction label::
* raAction comment::
* raAction agent::
* raAction target::
* raAction type::
@end menu


@c
@node raAction letter
@subsection raAction letter

This struct element holds a single character value that
can be used on the command line to invoke this option. For
a @samp{letter} value of @emph{b}, the option will be invoked
with @code{-b}.

If the letter invocation is to be ignored for this defined
option, set the @samp{letter} option to 0.

@xref{Letter Options}

@c
@node raAction label
@subsection raAction label

This struct element is a string that will be matched if it follows
a double-dash on the command line.  When an @samp{raAction} array element
has set the @code{label} element to @emph{option}, invocating
@code{--option} matches this array element.

@xref{Long Options}

@c
@node raAction comment
@subsection raAction comment

This struct element is used with a @option{--help} display to
provide a short explanation of the option.

@c
@node raAction agent
@subsection raAction agent

This struct element is a @emph{pointer} to an @samp{raAgent} struct
that is prepared to handle the option.  As a pointer, this element
will usually be represented by a variable name preceded by a @key{&}
to take its address.

The @samp{raAgent} struct defines if an option is a value or 
flat option (takes a value or not, respectively), and provides
functions for reading and writing the option value.

There are several builtin agents for common data types.  Creating
custom agents is how the library may be extended.

@xref{raAgent Detail}

@c
@node raAction target
@subsection raAction target

This data member, is not NULL, is a pointer to data that will
be set or read from according to the @code{raAgent} data member.

@c
@node raAction type
@subsection raAction type

This optional element provides a string to use with an value option
depiction in the @option{--help} option.

When this element is set to 

For options that take a value, this optional element provides a
string to use in the @option{--help} option when depicting its usage.

@noindent
Given an @samp{raAction} is:

@noindent
@{'a', "add", "NUMBER", "Number to add", &ra_string_agent, &nvalue@}

@noindent
the help depiction will be

@noindent
@samp{-a, --add=NUMBER  Number to add}.

If @samp{type} is set to NULL, the generic string @emph{VALUE} will
be used in the usage depiction.





